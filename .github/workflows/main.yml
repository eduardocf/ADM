name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'  # every 5 minutes
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract all dependencies (including config-based APIs)
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $result = @()

          foreach ($repo in $repos) {
              Set-Location $repo
              $projectDependencies = @{}
              $projectName = $repo
              $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
              if ($csproj) {
                $projectName = Split-Path $csproj.Directory.FullName -Leaf
              }

              $nuget = @()
              $dll = @()
              $api = @()

              # .csproj parsing
              Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.Reference |
                    Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                    ForEach-Object { $_.Include }
              }

              # packages.config
              Get-ChildItem -Recurse -Filter packages.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.packages.package | ForEach-Object { $_.id }
              }

              # web.config (api URLs)
              Get-ChildItem -Recurse -Filter web.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $api += $xml.configuration.appSettings.add |
                  Where-Object { $_.value -match "^https?://" } |
                  ForEach-Object { $_.value }
              }

              # appsettings.json (api URLs)
              Get-ChildItem -Recurse -Filter appsettings.json | ForEach-Object {
                $json = Get-Content $_.FullName -Raw | ConvertFrom-Json
                $values = $json.PSObject.Properties.Value
                foreach ($val in $values) {
                  if ($val -is [string] -and $val -match "^https?://") { $api += $val }
                  elseif ($val -is [hashtable]) {
                    $api += $val.Values | Where-Object { $_ -match "^https?://" }
                  }
                }
              }

              $result += [PSCustomObject]@{
                project = $projectName
                nuget = $nuget | Sort-Object -Unique
                dll = $dll | Sort-Object -Unique
                api = $api | Sort-Object -Unique
              }

              Set-Location ..
          }

          $result | ConvertTo-Json -Depth 5 | Out-File dependencies.json -Encoding utf8

      - name: Generate styled .dot file
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $dot = New-Object System.Collections.Generic.List[string]
          $dot.Add("digraph Dependencies {")
          $dot.Add("  rankdir=LR;")
          $dot.Add("  node [style=filled, fillcolor=white, fontname='Segoe UI'];")
          
          $allEdges = @()
          $allNodes = @{}
          
          foreach ($item in $json) {
              $app = $item.project
              $allNodes[$app] = 'fillcolor="#ffffff"'
          
              foreach ($pkg in $item.nuget) {
                  if ($pkg) {
                      $allEdges += @{ from = $app; to = $pkg; attr = '[color=black]' }
                      $allNodes[$pkg] = 'shape=box, fillcolor="#e6f0ff"'
                  }
              }
          
              foreach ($dll in $item.dll) {
                  if ($dll) {
                      $allEdges += @{ from = $app; to = $dll; attr = '[color=blue]' }
                      $allNodes[$dll] = 'shape=ellipse, fillcolor="#fff2cc"'
                  }
              }
          
              foreach ($url in $item.api) {
                  if ($url) {
                      $label = $url -replace '^https?://', ''
                      $cleanLabel = $label -replace '"', "'"
                      $allEdges += @{ from = $app; to = $url; attr = '[style=dashed, color=gray]' }
                      $allNodes[$url] = 'label="' + $cleanLabel + '", shape=diamond, fillcolor="#f8e0e6"'
                  }
              }
          }
          
          # Add edges
          foreach ($e in $allEdges) {
              $dot.Add('  "' + $e.from + '" -> "' + $e.to + '" ' + $e.attr + ';')
          }
          
          # Add nodes
          foreach ($n in $allNodes.Keys | Sort-Object) {
              $dot.Add('  "' + $n + '" [' + $allNodes[$n] + '];')
          }
          
          $dot.Add("}")
          
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $dot | Out-File artifacts/dependency_graph.dot -Encoding utf8
          Move-Item dependencies.json artifacts/

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          dot -Tsvg artifacts/dependency_graph.dot -o artifacts/graph.svg

      - name: Embed graph in index.html
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset='utf-8'>
            <title>App Dependency Graph</title>
            <style>
              body { font-family: 'Segoe UI'; background: #f5f5f5; text-align: center; margin: 0; padding: 2rem; }
              header { background: #0366d6; color: white; padding: 1rem; }
              svg { max-width: 100%; border: 1px solid #ccc; background: white; box-shadow: 0 4px 8px rgba(0,0,0,0.1); margin-top: 2rem; }
              footer { margin-top: 2rem; color: #777; font-size: 0.85rem; }
            </style>
          </head>
          <body>
            <header><h1>ðŸ“Œ Application Dependency Graph</h1><p>NuGet â€¢ DLL â€¢ APIs</p></header>
            $svg
            <footer>Generated by GitHub Actions + Graphviz</footer>
          </body>
          </html>
          "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
