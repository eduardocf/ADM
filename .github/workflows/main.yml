name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract all dependencies (code + config)
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $result = @()

          foreach ($repo in $repos) {
              Set-Location $repo
              $projectDependencies = @{}
              $projectName = $repo
              $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
              if ($csproj) {
                $projectName = Split-Path $csproj.Directory.FullName -Leaf
              }

              $deps = @()
              $nuget = @()
              $dll = @()
              $api = @()

              # .csproj references
              Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.Reference |
                  Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                  ForEach-Object { $_.Include }
              }

              # packages.config
              Get-ChildItem -Recurse -Filter packages.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.packages.package | ForEach-Object { $_.id }
              }

              # web.config API discovery
              Get-ChildItem -Recurse -Filter web.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $api += $xml.configuration.appSettings.add |
                  Where-Object { $_.value -match "^https?://" } |
                  ForEach-Object { $_.value }
              }

              # appsettings.json API discovery
              Get-ChildItem -Recurse -Filter appsettings.json | ForEach-Object {
                $json = Get-Content $_.FullName -Raw | ConvertFrom-Json
                $all = $json.PSObject.Properties.Value | ForEach-Object {
                  if ($_ -is [string] -and $_ -match "^https?://") { $_ }
                  elseif ($_ -is [hashtable]) {
                    $_.Values | Where-Object { $_ -match "^https?://" }
                  }
                }
                $api += $all
              }

              $deps += $nuget + $dll + $api

              if ($deps.Count -gt 0) {
                $result += [PSCustomObject]@{
                  project = $projectName
                  nuget = $nuget | Sort-Object -Unique
                  dll = $dll | Sort-Object -Unique
                  api = $api | Sort-Object -Unique
                  all = $deps | Sort-Object -Unique
                }
              }
              Set-Location ..
          }

          $result | ConvertTo-Json -Depth 5 | Out-File dependencies.json -Encoding utf8

      - name: Generate styled .dot file
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $lines = @("digraph Dependencies {", "  rankdir=LR;", "  node [style=filled, fillcolor=white, fontname='Segoe UI'];")
          $allNodes = @()

          foreach ($item in $json) {
            $app = $item.project
            $allNodes += $app

            foreach ($dep in $item.nuget) {
              $allNodes += $dep
              $lines += "  `"$app`" -> `"$dep`" [color=black];"
              $lines += "  `"$dep`" [shape=box, style=filled, fillcolor=\"#e6f0ff\"];"
            }

            foreach ($dep in $item.dll) {
              $allNodes += $dep
              $lines += "  `"$app`" -> `"$dep`" [color=blue];"
              $lines += "  `"$dep`" [shape=ellipse, style=filled, fillcolor=\"#fff2cc\"];"
            }

            foreach ($url in $item.api) {
              $allNodes += $url
              $label = $url -replace "^https?://", ""
              $lines += "  `"$app`" -> `"$url`" [style=dashed, color=gray];"
              $lines += "  `"$url`" [label=`"$label`", shape=diamond, style=filled, fillcolor=\"#f8e0e6\"];"
            }
          }

          # Add stand-alone nodes
          foreach ($node in $allNodes | Sort-Object -Unique) {
            if (-not ($lines -match "`"$node`"")) {
              $lines += "  `"$node`";"
            }
          }

          $lines += "}"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $lines | Out-File artifacts/dependency_graph.dot -Encoding utf8
          Move-Item dependencies.json artifacts/

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          dot -Tsvg artifacts/dependency_graph.dot -o artifacts/graph.svg

      - name: Generate index.html with inline SVG
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset='utf-8'>
            <title>Application Dependency Graph</title>
            <style>
              body { font-family: 'Segoe UI'; background: #f5f5f5; text-align: center; padding: 2rem; margin: 0; }
              header { background: #0366d6; color: white; padding: 1rem; }
              svg { max-width: 100%; height: auto; background: white; border: 1px solid #ccc; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin-top: 2rem; }
              footer { color: #777; margin-top: 2rem; font-size: 0.85rem; }
            </style>
          </head>
          <body>
            <header>
              <h1>ðŸ“Š Application Dependency Graph</h1>
              <p>Includes NuGet, DLLs, and External APIs</p>
            </header>
            $svg
            <footer>Generated by GitHub Actions + Graphviz</footer>
          </body>
          </html>
          "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
