name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract dependencies from .csproj, packages.config, appsettings.json, *.config
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $results = @()

          foreach ($repo in $repos) {
            Set-Location $repo
            $projectName = $repo
            $nuget = @()
            $dll = @()
            $apis = @()

            # Get project name from first .csproj found
            $csproj = Get-ChildItem -Recurse -Filter *.csproj -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($csproj) {
              $projectName = Split-Path $csproj.Directory.FullName -Leaf
            }

            # Parse .csproj for dependencies
            Get-ChildItem -Recurse -Filter *.csproj -ErrorAction SilentlyContinue | ForEach-Object {
              [xml]$xml = Get-Content $_.FullName
              $nuget += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }
              $dll += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }
              $dll += $xml.Project.ItemGroup.Reference |
                Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                ForEach-Object { $_.Include }
            }

            # Legacy packages.config
            Get-ChildItem -Recurse -Filter packages.config -ErrorAction SilentlyContinue | ForEach-Object {
              [xml]$xml = Get-Content $_.FullName
              $nuget += $xml.packages.package | ForEach-Object { $_.id }
            }

            # Extract URLs from appsettings.json
            Get-ChildItem -Recurse -Filter appsettings.json -ErrorAction SilentlyContinue | ForEach-Object {
              $json = Get-Content $_.FullName -Raw | ConvertFrom-Json
              $json.PSObject.Properties | ForEach-Object {
                $value = $_.Value
                if ($value -is [string] -and $value -match '^https?://') {
                  $apis += $value
                } elseif ($value -is [hashtable]) {
                  $value.Values | Where-Object { $_ -match '^https?://' } | ForEach-Object { $apis += $_ }
                }
              }
            }

            # Extract URLs from *.config (e.g., web.config, App.config)
            Get-ChildItem -Recurse -Include *.config -ErrorAction SilentlyContinue | ForEach-Object {
              try {
                [xml]$xml = Get-Content $_.FullName
                $settings = $xml.SelectNodes("//appSettings/add") | Where-Object { $_.value -match '^https?://' }
                $settings | ForEach-Object { $apis += $_.value }
              } catch { }
            }

            $results += [PSCustomObject]@{
              project = $projectName
              nuget = $nuget | Sort-Object -Unique
              dll = $dll | Sort-Object -Unique
              api = $apis | Sort-Object -Unique
            }

            Set-Location ..
          }

          $results | ConvertTo-Json -Depth 5 | Out-File dependencies.json -Encoding utf8

      - name: Generate DOT file with styles
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $lines = @("digraph Dependencies {", "  rankdir=LR;", "  node [style=filled, fontname='Segoe UI'];")
          $declared = @{}

          foreach ($item in $json) {
            $app = $item.project

            foreach ($pkg in $item.nuget) {
              if ($pkg) {
                $lines += '  "' + $app + '" -> "' + $pkg + '" [color=black];'
                $lines += '  "' + $pkg + '" [shape=box, fillcolor="#e6f0ff"];'
                $declared[$pkg] = $true
              }
            }

            foreach ($dll in $item.dll) {
              if ($dll) {
                $lines += '  "' + $app + '" -> "' + $dll + '" [color=blue];'
                $lines += '  "' + $dll + '" [shape=ellipse, fillcolor="#fff2cc"];'
                $declared[$dll] = $true
              }
            }

            foreach ($url in $item.api) {
              if ($url) {
                $label = $url -replace '^https?://', ''
                $label = $label -replace '"', "'"
                $lines += '  "' + $app + '" -> "' + $url + '" [style=dashed, color=gray];'
                $lines += '  "' + $url + '" [label="' + $label + '", shape=diamond, fillcolor="#f8e0e6"];'
                $declared[$url] = $true
              }
            }

            $declared[$app] = $true
          }

          # Add any orphan nodes explicitly
          foreach ($node in $declared.Keys | Sort-Object) {
            if (-not ($lines -join "`n" -match '"' + [regex]::Escape($node) + '"')) {
              $lines += '  "' + $node + '";'
            }
          }

          $lines += "}"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $lines | Out-File artifacts/dependency_graph.dot -Encoding utf8
          Move-Item dependencies.json artifacts/

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          dot -Tsvg artifacts/dependency_graph.dot -o artifacts/graph.svg

      - name: Generate index.html with inline SVG
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset='utf-8'>
            <title>Application Dependency Graph</title>
            <style>
              body { font-family: 'Segoe UI', sans-serif; background: #f5f5f5; text-align: center; margin: 0; padding: 2rem; }
              header { background: #0366d6; color: white; padding: 1rem; }
              svg { max-width: 100%; height: auto; background: white; border: 1px solid #ccc; box-shadow: 0 0 12px rgba(0,0,0,0.1); margin-top: 2rem; }
              footer { margin-top: 2rem; color: #777; font-size: 0.85rem; }
            </style>
          </head>
          <body>
            <header>
              <h1>ðŸ“Š Application Dependency Graph</h1>
              <p>NuGet â€¢ DLL â€¢ API (from config files)</p>
            </header>
            $svg
            <footer>Generated by GitHub Actions and Graphviz</footer>
          </body>
          </html>
          "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
