name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract dependencies (including COM and DLL references)
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $result = @()

          foreach ($repo in $repos) {
              Set-Location $repo
              $projectDependencies = @{}
              $csprojFiles = Get-ChildItem -Recurse -Filter *.csproj -ErrorAction SilentlyContinue
              
              foreach ($file in $csprojFiles) {
                  [xml]$xml = Get-Content $file.FullName
                  $projectName = Split-Path $file.Directory.FullName -Leaf
                  $deps = @()

                  # NuGet references
                  $deps += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }

                  # COM references
                  $deps += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }

                  # DLL references pointing to other apps
                  $deps += $xml.Project.ItemGroup.Reference |
                    Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                    ForEach-Object { $_.Include }

                  if ($deps.Count -gt 0) {
                    $projectDependencies[$projectName] = $deps
                  }
              }

              # Legacy packages.config support
              $pkgFiles = Get-ChildItem -Recurse -Filter packages.config -ErrorAction SilentlyContinue
              foreach ($file in $pkgFiles) {
                  [xml]$xml = Get-Content $file.FullName
                  $pkgIds = $xml.packages.package | ForEach-Object { $_.id }
                  $projectName = Split-Path $file.Directory.FullName -Leaf

                  if ($projectDependencies.ContainsKey($projectName)) {
                    $projectDependencies[$projectName] += $pkgIds
                  } else {
                    $projectDependencies[$projectName] = $pkgIds
                  }
              }

              foreach ($entry in $projectDependencies.GetEnumerator()) {
                  $result += [PSCustomObject]@{
                      project = $entry.Key
                      dependencies = $entry.Value | Sort-Object -Unique
                  }
              }
              Set-Location ..
          }

          $result | ConvertTo-Json -Depth 3 | Out-File dependencies.json -Encoding utf8

      - name: Generate .dot file (including disconnected nodes)
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $dotLines = @("digraph Dependencies {", "  rankdir=LR;")
      
          # Track all node names
          $allNodes = @()
          foreach ($item in $json) {
              $allNodes += $item.project
              $allNodes += $item.dependencies
              foreach ($dep in $item.dependencies) {
                  if ($dep -and $dep -ne $item.project) {
                      $dotLines += "  `"$($item.project)`" -> `"$($dep)`";"
                  }
              }
          }
      
          # Emit orphan nodes (not connected to anything)
          foreach ($node in $allNodes | Sort-Object -Unique) {
              if (-not ($dotLines -match "`"$node`"")) {
                  $dotLines += "  `"$node`";"
              }
          }
      
          $dotLines += "}"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $dotLines | Out-File artifacts/dependency_graph.dot -Encoding utf8

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          dot -Tsvg dependency_graph.dot -o artifacts/graph.svg
          move dependencies.json artifacts/
          move dependency_graph.dot artifacts/

      - name: Inline SVG into index.html
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
          <!DOCTYPE html>
          <html lang='en'>
          <head>
            <meta charset='UTF-8'>
            <meta name='viewport' content='width=device-width, initial-scale=1.0'>
            <title>Dependency Graph</title>
            <style>
              body { font-family: 'Segoe UI', sans-serif; background: #f5f5f5; text-align: center; margin: 0; padding: 2rem; }
              header { background: #0366d6; color: white; padding: 1rem; }
              svg { max-width: 100%; height: auto; background: white; border: 1px solid #ccc; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin-top: 2rem; }
              footer { margin-top: 2rem; color: #555; font-size: 0.9rem; }
            </style>
          </head>
          <body>
            <header>
              <h1>ðŸ“Œ Application Dependency Graph</h1>
              <p>Updated automatically every 5 minutes</p>
            </header>
            <div class="svg-container">
            $svg
            </div>
            <footer>Generated by GitHub Actions and Graphviz</footer>
          </body>
          </html>
          "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
