name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract dependencies (code + config)
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $result = @()
          foreach ($repo in $repos) {
              Set-Location $repo
              $projectName = $repo
              $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
              if ($csproj) {
                $projectName = Split-Path $csproj.Directory.FullName -Leaf
              }

              $nuget = @()
              $dll = @()
              $api = @()

              Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }
                $dll += $xml.Project.ItemGroup.Reference |
                  Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                  ForEach-Object { $_.Include }
              }

              Get-ChildItem -Recurse -Filter packages.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $nuget += $xml.packages.package | ForEach-Object { $_.id }
              }

              Get-ChildItem -Recurse -Filter web.config | ForEach-Object {
                [xml]$xml = Get-Content $_.FullName
                $api += $xml.configuration.appSettings.add |
                  Where-Object { $_.value -match "^https?://" } |
                  ForEach-Object { $_.value }
              }

              Get-ChildItem -Recurse -Filter appsettings.json | ForEach-Object {
                $json = Get-Content $_.FullName -Raw | ConvertFrom-Json
                $json.PSObject.Properties | ForEach-Object {
                  if ($_.Value -is [string] -and $_.Value -match "^https?://") {
                    $api += $_.Value
                  }
                  elseif ($_.Value -is [hashtable]) {
                    $_.Value.Values | Where-Object { $_ -match "^https?://" } | ForEach-Object { $api += $_ }
                  }
                }
              }

              $result += [PSCustomObject]@{
                project = $projectName
                nuget = $nuget | Sort-Object -Unique
                dll = $dll | Sort-Object -Unique
                api = $api | Sort-Object -Unique
              }

              Set-Location ..
          }

          $result | ConvertTo-Json -Depth 5 | Out-File dependencies.json -Encoding utf8

      - name: Generate safe .dot file
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $dot = @()
          $dot += "digraph Dependencies {"
          $dot += "  rankdir=LR;"
          $dot += "  node [style=filled, fillcolor=white, fontname='Segoe UI'];"
          $allNodes = @{}

          foreach ($item in $json) {
              $app = $item.project
              $allNodes[$app] = $true

              foreach ($pkg in $item.nuget) {
                  if ($pkg) {
                      $allNodes[$pkg] = $true
                      $dot += "  `"$app`" -> `"$pkg`" [color=black];"
                      $dot += "  `"$pkg`" [shape=box, fillcolor=""#e6f0ff""];"
                  }
              }

              foreach ($dll in $item.dll) {
                  if ($dll) {
                      $allNodes[$dll] = $true
                      $dot += "  `"$app`" -> `"$dll`" [color=blue];"
                      $dot += "  `"$dll`" [shape=ellipse, fillcolor=""#fff2cc""];"
                  }
              }

              foreach ($url in $item.api) {
                  if ($url) {
                      $label = $url -replace "^https?://", ""
                      $label = $label -replace '"', "'"
                      $allNodes[$url] = $true
                      $dot += "  `"$app`" -> `"$url`" [style=dashed, color=gray];"
                      $dot += "  `"$url`" [label=`"$label`", shape=diamond, fillcolor=""#f8e0e6""];"
                  }
              }
          }

          foreach ($node in $allNodes.Keys | Sort-Object) {
              if (-not ($dot -join "`n" -match "`"$node`"")) {
                  $dot += "  `"$node`";"
              }
          }

          $dot += "}"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $dot | Out-File artifacts/dependency_graph.dot -Encoding utf8

      - name: Upload .dot file for debugging
        uses: actions/upload-artifact@v3
        with:
          name: dependency-graph-dot
          path: artifacts/dependency_graph.dot

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          dot -Tsvg artifacts/dependency_graph.dot -o artifacts/graph.svg

      - name: Embed SVG in HTML
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset='utf-8'>
            <title>App Dependency Graph</title>
            <style>
              body { font-family: 'Segoe UI'; text-align: center; margin: 0; padding: 2rem; background: #f8f8f8; }
              header { background: #0366d6; color: white; padding: 1rem; }
              svg { width: 90%; margin-top: 2rem; background: white; border: 1px solid #ccc; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
              footer { margin-top: 2rem; color: #666; font-size: 0.85rem; }
            </style>
          </head>
          <body>
            <header><h1>ðŸ“Š Application Dependency Graph</h1><p>NuGet â€¢ DLL â€¢ API URLs</p></header>
            $svg
            <footer>Generated via GitHub Actions and Graphviz</footer>
          </body>
          </html>
          "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
