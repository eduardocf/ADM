name: Build and Publish Dependency Graph

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  dependency-map:
    runs-on: windows-latest

    steps:
      - name: Checkout orchestrator repo
        uses: actions/checkout@v3

      - name: Clone application repositories
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          foreach ($repo in $repos) {
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/eduardocf/$repo.git
          }

      - name: Extract code-based dependencies
        shell: pwsh
        run: |
          $repos = @("Application01", "Application02", "Application03", "Application04", "Application05")
          $result = @()

          foreach ($repo in $repos) {
              Set-Location $repo
              $deps = @{}
              $csprojFiles = Get-ChildItem -Recurse -Filter *.csproj -ErrorAction SilentlyContinue

              foreach ($file in $csprojFiles) {
                  [xml]$xml = Get-Content $file.FullName
                  $projectName = Split-Path $file.Directory.FullName -Leaf
                  $d = @()

                  $d += $xml.Project.ItemGroup.PackageReference | ForEach-Object { $_.Include }
                  $d += $xml.Project.ItemGroup.COMReference | ForEach-Object { $_.Include }
                  $d += $xml.Project.ItemGroup.Reference |
                    Where-Object { $_.Include -match "Application" -or $_.HintPath -match "Application" } |
                    ForEach-Object { $_.Include }

                  if ($d.Count -gt 0) {
                      $deps[$projectName] = $d
                  }
              }

              $pkgFiles = Get-ChildItem -Recurse -Filter packages.config -ErrorAction SilentlyContinue
              foreach ($file in $pkgFiles) {
                  [xml]$xml = Get-Content $file.FullName
                  $projectName = Split-Path $file.Directory.FullName -Leaf
                  $d = $xml.packages.package | ForEach-Object { $_.id }

                  if ($deps.ContainsKey($projectName)) {
                      $deps[$projectName] += $d
                  } else {
                      $deps[$projectName] = $d
                  }
              }

              foreach ($kv in $deps.GetEnumerator()) {
                  $result += [PSCustomObject]@{
                      project = $kv.Key
                      dependencies = $kv.Value | Sort-Object -Unique
                  }
              }

              Set-Location ..
          }

          $result | ConvertTo-Json -Depth 3 | Out-File dependencies.json -Encoding utf8

      - name: Generate .dot file with stand-alone nodes
        shell: pwsh
        run: |
          $json = Get-Content dependencies.json | ConvertFrom-Json
          $dotLines = @("digraph Dependencies {", "  rankdir=LR;")
          $allNodes = @()

          foreach ($item in $json) {
              $allNodes += $item.project
              $allNodes += $item.dependencies
              foreach ($dep in $item.dependencies) {
                  if ($dep -and $dep -ne $item.project) {
                      $dotLines += "  `"$($item.project)`" -> `"$($dep)`";"
                  }
              }
          }

          foreach ($node in $allNodes | Sort-Object -Unique) {
              if (-not ($dotLines -join "`n" -match "`"$node`"")) {
                  $dotLines += "  `"$node`";"
              }
          }

          $dotLines += "}"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $dotLines | Out-File artifacts/dependency_graph.dot -Encoding utf8
          Move-Item dependencies.json artifacts/

      - name: Install Graphviz and render SVG
        run: |
          choco install graphviz -y
          dot -Tsvg artifacts/dependency_graph.dot -o artifacts/graph.svg

      - name: Generate index.html with inline SVG
        shell: pwsh
        run: |
          $svg = Get-Content artifacts/graph.svg -Raw
          $html = @"
                <!DOCTYPE html>
                <html lang='en'>
                <head>
                  <meta charset='UTF-8'>
                  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                  <title>Dependency Graph</title>
                  <style>
                    body { font-family: 'Segoe UI', sans-serif; background: #f5f5f5; text-align: center; margin: 0; padding: 2rem; }
                    header { background: #0366d6; color: white; padding: 1rem; }
                    svg { max-width: 100%; height: auto; background: white; border: 1px solid #ccc; box-shadow: 0 4px 12px rgba(0,0,0,0.1); margin-top: 2rem; }
                    footer { margin-top: 2rem; color: #555; font-size: 0.9rem; }
                  </style>
                </head>
                <body>
                  <header>
                    <h1>ðŸ“Œ Application Dependency Graph</h1>
                    <p>Updated automatically every 5 minutes</p>
                  </header>
                  $svg
                  <footer>Generated by GitHub Actions and Graphviz</footer>
                </body>
                </html>
                "@
          $html | Out-File artifacts/index.html -Encoding utf8

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
